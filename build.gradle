plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.5'
    id 'io.spring.dependency-management' version '1.1.6'
    id 'org.hidetake.swagger.generator' version '2.18.2'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation group: 'berlin.yuna', name: 'type-map', version: '1.2.3'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    implementation 'org.springdoc:springdoc-openapi-ui:1.6.14'
    swaggerCodegen 'io.swagger:swagger-codegen-cli:2.3.1'
}

tasks.named('test') {
    useJUnitPlatform()
}

swaggerSources {
    NewsBeaconApi {
        inputFile = file('swagger/swagger.yaml')
        code {
            language = 'spring'
            configFile = file('swagger-config.json')
            outputDir = file('target/generated')
            components = ['models', 'apis']
        }
    }
}

if (!tasks.findByName('generateSwaggerCode')) {
    tasks.register('generateSwaggerCode') {
        dependsOn 'swaggerSources'
        doLast {
            println 'Swagger code generation completed.'
        }
    }
}

tasks.named('compileJava') {
    dependsOn 'generateSwaggerCode'
}

tasks.named('generateSwaggerCode') {
    doFirst {
        println 'Starting Swagger code generation...'
    }
    doLast {
        println 'Swagger code generation completed.'
    }
}